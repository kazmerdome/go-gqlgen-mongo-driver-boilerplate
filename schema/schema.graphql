# DIRECTIVE
##########
directive @auth(role: [Role!]!) on FIELD_DEFINITION

directive @goModel(model: String, models: [String!]) on OBJECT
    | INPUT_OBJECT
    | SCALAR
    | ENUM
    | INTERFACE
    | UNION

directive @goField(forceResolver: Boolean, name: String) on INPUT_FIELD_DEFINITION
    | FIELD_DEFINITION


# SCALAR
##########
scalar Time
scalar ObjectID @goModel(model: "go-graphql-mongodb-boilerplate/scalar.ObjectIDScalar")
scalar Json @goModel(model: "go-graphql-mongodb-boilerplate/scalar.JSONScalar")


# QUERY
##########
type Query {
  # User
  ##########
  userMe: User

  "@auth(role: [ADMIN])"
  user(
    where: UserWhereDTO
    search: String
  ): User @auth(role: ADMIN)

  "@auth(role: [ADMIN])"
  users(
    where: UserWhereDTO
    "search in : [email, username]"
    search: String
    in: [ObjectID]
    orderBy: UserOrderByENUM
    skip: Int
    limit: Int
  ): [User]! @auth(role: [ADMIN])

  "@auth(role: [ADMIN])"
  userCount(
    where: UserWhereDTO
    search: String
  ): Int @auth(role: [ADMIN])

}

# MUTATION
##########
type Mutation {
  # Auth
  ##########
  authBasicStrategySignUp(
    data: AuthBasicStrategySignUpDTO!
  ): AuthToken!

  authBasicStrategySignIn(
    data: AuthBasicStrategySignInDTO!
  ): AuthToken!


  # User
  ##########
  "@auth(role: [ADMIN])"
  createUser(
    data: UserCreateDTO!
  ): User! @auth(role: ADMIN)

  "@auth(role: [ADMIN])"
  updateUser(
    where: UserWhereUniqueDTO!
    data: UserUpdateDTO!
  ): User @auth(role: [ADMIN])

  "@auth(role: [ADMIN])"
  deleteUser(
    where: UserWhereUniqueDTO!
  ): User @auth(role: ADMIN)

}
